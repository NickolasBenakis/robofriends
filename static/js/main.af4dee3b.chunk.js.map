{"version":3,"sources":["serviceWorker.js","components/Card.jsx","components/CardList.jsx","components/searchBox.jsx","components/CounterButton.jsx","components/Header.jsx","components/Scroll.jsx","constants.js","containers/App.jsx","actions.js","reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","react_default","a","createElement","className","src","concat","this","props","id","alt","name","email","Component","CardList","_ref","robots","map","user","Card_Card","key","SearchBox","searchField","searchChange","type","placeholder","onChange","CounterButton","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","updateCount","setState","state","count","nextProps","nextState","console","log","color","onClick","Header","components_CounterButton","Scroll","style","overflowY","border","height","children","App","onRequestRobots","_this$props","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","textAlign","components_Header","connect","searchRobots","requestRobots","error","dispatch","event","text","target","value","payload","fetch","then","res","json","data","catch","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","ThunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.af4dee3b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class Card extends Component {\n\n    render() {\n        return (\n            <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n                <img src={`https://robohash.org/${this.props.id}?200x200`} alt='robots' />\n                <div>\n                    <h2>{this.props.name}</h2>\n                    <p>{this.props.email}</p>\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react';\n// import './cardList.css';\nimport Card from './Card';\n\nexport default function CardList({ robots }) {\n\n  return (\n    <div>\n      {\n        robots.map(user => {\n          return <Card key={user.id} id={user.id} name={user.name} email={user.email} />\n        })\n      }\n    </div>\n  );\n}\n\n","import React from 'react';\n\n\nexport default function SearchBox({ searchField, searchChange }) {\n\n    return (\n        <div className=\"pa2\">\n            <input className=\"pa3 ba b--green bg-lightest-blue\"\n                type=\"search\" placeholder=\"search robots\" onChange={searchChange} />\n        </div>\n    );\n}\n\n","import React, { Component } from 'react'\n\n\nclass CounterButton extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            count: 0\n        }\n    }\n\n\n\n    shouldComponentUpdate(nextProps, nextState) {\n        console.log(nextProps, nextState)\n        if (this.state.count !== nextState.count) {\n            return true;\n        }\n        return false;\n    }\n\n\n    updateCount = () => {\n        this.setState(state => {\n            return { count: state.count + 1 }\n        })\n    }\n\n    render() {\n        console.log(\"counterButton\")\n        return (\n            <button color={this.props.color} onClick={this.updateCount}>\n                Count: {this.state.count}\n            </button>\n        )\n    }\n}\n\nexport default CounterButton;","import React, { Component } from 'react'\nimport CounterButton from './CounterButton';\n\n\nclass Header extends Component {\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return false;\n    }\n\n    render() {\n        console.log(\"Header\")\n        return (\n            <div>\n                <h1 className=\"f2\">RoboFriends</h1>\n                <CounterButton color={'red'} />\n            </div>\n        )\n    }\n}\n\nexport default Header;","import React from 'react';\n\nexport default function Scroll(props) {\n    return (\n        <div style={{ overflowY: 'scroll', border: \"5px solid black\", height: \"800px\" }}>\n            {props.children}\n        </div>\n    )\n}\n\n\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_RESOLVED = 'REQUEST_ROBOTS_RESOLVED';\nexport const REQUEST_ROBOTS_REJECT = 'REQUEST_ROBOTS_REJECT';\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList.jsx';\nimport SearchBox from '../components/searchBox.jsx';\nimport './App.css';\nimport Header from '../components/Header';\nimport Scroll from '../components/Scroll.jsx';\nimport { setSearchField, requestRobots } from '../actions.js';\n\nconst mapStateToProps = (state) => (\n    {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n);\nconst mapDispatchToProps = (dispatch) => (\n    {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n);\n\nclass App extends Component {\n\n    componentDidMount() {\n        this.props.onRequestRobots();\n    }\n\n    render() {\n        const { searchField, onSearchChange, robots, isPending } = this.props;\n\n        const filteredRobots = robots.filter(robot => robot.name.toLowerCase().includes(searchField.toLowerCase()));\n        return (isPending) ?\n            <h1 style={{ textAlign: \"center\" }}>Loading</h1> :\n            (\n                <div className=\"App\">\n                    <Header />\n                    <SearchBox searchChange={onSearchChange} />\n                    <Scroll>\n                        <CardList robots={filteredRobots} />\n                    </Scroll>\n                </div>\n            );\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_REJECT,\n    REQUEST_ROBOTS_RESOLVED\n} from './constants.js';\n\nexport const setSearchField = (text) => {\n    console.log(text);\n    return {\n        type: CHANGE_SEARCH_FIELD,\n        payload: text\n    }\n}\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(res => res.json())\n        .then(data => dispatch({ type: REQUEST_ROBOTS_RESOLVED, payload: data }))\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_REJECT, payload: error }))\n}","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_REJECT,\n    REQUEST_ROBOTS_RESOLVED\n} from './constants.js';\n\n\nconst initialStateSearch = {\n    searchField: '',\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n    console.log(action.type);\n    switch (action.type) {\n        case (CHANGE_SEARCH_FIELD):\n            return Object.assign({}, state, { searchField: action.payload })\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n    switch (action.type) {\n        case (REQUEST_ROBOTS_PENDING):\n            return Object.assign({}, state, { isPending: true })\n        case (REQUEST_ROBOTS_RESOLVED):\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\n        case (REQUEST_ROBOTS_REJECT):\n            return Object.assign({}, state, { error: action.payload, isPending: false })\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App.jsx';\nimport { Provider } from 'react-redux';\nimport { createLogger } from 'redux-logger';\nimport ThunkMiddleware from 'redux-thunk';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(ThunkMiddleware, logger));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}